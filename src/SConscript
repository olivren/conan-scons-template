import sys

# Declare a custom argument, to select a debug or a release build.
AddOption('--debug-build', action='store_true', help='debug build')

# FIXME: Compiler, version, arch are hardcoded, not parameterized
# Starting from MSVC 2017, MSVC_VERSION and TARGET_ARCH don't work anymore.
# Use MSVC_USE_SCRIPT instead to locate the vcvarsall script.
env = Environment(MSVC_VERSION='14.0', TARGET_ARCH='x86_64')

is_windows = (env['PLATFORM'] == 'win32')
is_linux = not is_windows
is_debug = GetOption('debug_build')
is_release = not is_debug

if is_release:
    env.Append(CPPDEFINES='NDEBUG')

if is_windows and is_debug:
    env.Append(CXXFLAGS = '/MDd /Zi')
    env.Append(LINKFLAGS = '/DEBUG:FASTLINK')

if is_windows and is_release:
    env.Append(CXXFLAGS = '/MD /O2')

if is_linux:
    # Set the rpath of the executable so that it looks for the shared
    # libraries in the same directory the executable is living in.
    # No need to do the same on Windows, because this is the default behavior.
    env.Append(LINKFLAGS = '-z origin')
    env.Append(RPATH = env.Literal('\\$$ORIGIN'))

if is_linux and is_debug:
    env.Append(CXXFLAGS = '-g -ggdb')
  
if is_linux and is_release:
    env.Append(CXXFLAGS = '-O2')
    env.Append(LINKFLAGS = '-O2')
											    
# The arguments to the `SConscript` function are paths that are
# relative to the current SConscript file. The # at the start of
# an argument makes it relative to the root SConstruct file.
#
# Dir('.') gives the path to the current build's path, relative
# to the root SConstruct file.
#
# Combined together, these two things allow us to find the
# SConscript_conan file that is generated by conan in the build
# directory.
#
build_path_relative_to_sconstruct = Dir('..').path

conan = SConscript('{}/SConscript_conan'.format(build_path_relative_to_sconstruct))
if not conan:
    print 'File `SConscript_conan` is missing.'
    print 'It should be generated by running `conan install`.'
    sys.exit(1)

env.MergeFlags(conan['conan'])
env.Library('hello', 'hello.cpp')
